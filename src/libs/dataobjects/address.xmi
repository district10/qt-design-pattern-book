<?xml version="1.0" encoding="UTF-8"?>
<XMI xmlns:UML="http://schema.omg.org/spec/UML/1.3" verified="false" timestamp="2005-09-08T17:52:25" xmi.version="1.2" >
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://uml.sf.net</XMI.exporter>
   <XMI.exporterVersion>1.4.89</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.name="UML" href="UML.xml" xmi.version="1.3" />
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" isLeaf="false" isRoot="false" isAbstract="false" name="UML Model" >
   <UML:Namespace.ownedElement>
    <UML:Stereotype isSpecification="false" isLeaf="false" visibility="public" xmi.id="16008" isRoot="false" isAbstract="false" name="datatype" />
    <UML:Stereotype isSpecification="false" isLeaf="false" visibility="public" xmi.id="16091" isRoot="false" isAbstract="false" name="enum" />
    <UML:Stereotype isSpecification="false" isLeaf="false" visibility="public" xmi.id="25032" isRoot="false" isAbstract="false" name="constructor" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16007" isRoot="false" isAbstract="false" name="int" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16009" isRoot="false" isAbstract="false" name="char" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16010" isRoot="false" isAbstract="false" name="bool" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16011" isRoot="false" isAbstract="false" name="float" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16012" isRoot="false" isAbstract="false" name="double" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16013" isRoot="false" isAbstract="false" name="long" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16014" isRoot="false" isAbstract="false" name="short" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16015" isRoot="false" isAbstract="false" name="string" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16022" isRoot="false" isAbstract="false" name="void" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16026" isRoot="false" isAbstract="false" name="const QObject&amp;" elementReference="16017" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16029" isRoot="false" isAbstract="false" name="QObject&amp;" elementReference="16017" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16032" isRoot="false" isAbstract="false" name="QObject*" elementReference="16017" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16035" isRoot="false" isAbstract="false" name="const DataObject&amp;" elementReference="16016" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16044" isRoot="false" isAbstract="false" name="const QString&amp;" elementReference="16023" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16058" isRoot="false" isAbstract="false" name="DataObject*" elementReference="16016" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16061" isRoot="false" isAbstract="false" name="const QVariant&amp;" elementReference="16055" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16067" isRoot="false" isAbstract="false" name="const char*" elementReference="16009" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16076" isRoot="false" isAbstract="false" name="ConstraintMgr&amp;" elementReference="16070" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16100" isRoot="false" isAbstract="false" name="const Country&amp;" elementReference="16086" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16102" isRoot="false" isAbstract="false" name="Country&amp;" elementReference="16086" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16211" isRoot="false" isAbstract="false" name="Constraint*" elementReference="16167" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16239" isRoot="false" isAbstract="false" name="QHash&lt; QString, Constraint * >" elementReference="16238" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16251" isRoot="false" isAbstract="false" name="const DataObject*" elementReference="16016" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16277" isRoot="false" isAbstract="false" name="const ConstraintMgr&amp;" elementReference="16070" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16308" isRoot="false" isAbstract="false" name="ObjectFactory*" elementReference="16109" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16313" isRoot="false" isAbstract="false" name="Address*" elementReference="16110" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="25063" isRoot="false" isAbstract="false" name="const QDate&amp;" elementReference="25054" />
    <UML:DataType stereotype="16008" isSpecification="false" isLeaf="false" visibility="public" xmi.id="25434" isRoot="false" isAbstract="false" name="QMetaObject*" />
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16018" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="//start// class ConstraintMgr;/**
Base class for all objects which have constrained properties.
This class provides extra convenience functions for
intraspection, and property-copying.

" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16016" isRoot="false" isAbstract="false" name="DataObject" >
     <UML:Classifier.feature>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16021" isRoot="false" isAbstract="false" name="DataObject" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29704" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16024" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Reads all the properties from the source object (using intraspection)
and saves them to our object." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16025" isRoot="false" isAbstract="false" name="readFrom" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29705" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16027" value="" type="16026" name="source" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="writes all our properties into a QObject
@return true if successful in setting all properties." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16028" isRoot="false" isAbstract="false" name="writeTo" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29706" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16030" value="" type="16029" name="dest" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="iterates through the wayward and steals all its children,
reparenting them under &quot;this&quot;
@param wayward - another QObject which has children we wish to add
to this. The wayward loses children." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16031" isRoot="false" isAbstract="false" name="adoptChildren" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29707" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16033" value="" type="16032" name="wayward" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@param compareChildren if true recursively checks children
@return true if other has the same property values
as this." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16034" isRoot="false" isAbstract="false" name="equals" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29708" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16036" value="" type="16035" name="other" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16037" value="" type="16010" name="compareChildren" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16038" isRoot="false" isAbstract="false" name="operator ==" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29709" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16039" value="" type="16035" name="other" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16040" isRoot="false" isAbstract="false" name="className" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29710" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return a list of propertyNames, so that the user of DataObject does not need to
use a @ref QMetaObject just to get a list of property names." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16041" isRoot="false" isAbstract="false" name="propertyNames" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29711" type="16042" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="public convenience functions that return the QMetaProperty for a given
propertyname (or index).." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16043" isRoot="false" isAbstract="false" name="metaProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29712" type="16046" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16045" value="" type="16044" name="propname" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16047" isRoot="false" isAbstract="false" name="metaProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29713" type="16046" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16048" value="" type="16007" name="i" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return number of properties.
@param superclass include superclass inherited properties in the count
(currently ignored)" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16049" isRoot="false" isAbstract="false" name="numProperties" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29714" type="16050" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return human and machine readable representation of this object (XML format)" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16051" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29715" type="16023" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16052" value="" type="16007" name="indentlevel" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16053" isRoot="false" isAbstract="false" name="property" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29716" type="16055" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16054" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Polymorphic clone() method - derived versions can return
more specific types, and perform deep or shallow clones as
required" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16056" isRoot="false" isAbstract="false" name="clone" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29717" type="16058" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16057" value="" type="16010" name="deep" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="protected" xmi.id="16059" isRoot="false" isAbstract="false" name="propertyChanged" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29718" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16060" value="" type="16044" name="name" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16062" value="" type="16061" name="" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Overrides, hides, and if it satisfies, calls the base class method too!
@param propertyName name of property to set
@param value value to set property
@return true if value satisfies the regexp constraint for
this property.

NOTE: Qt3's QObject had these as virtual, but in Qt4, they are non-virtual.
This means these methods will not be called if you use the QObject
interface.
" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16063" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29719" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16064" value="" type="16044" name="propName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16065" value="" type="16061" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16066" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29720" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16068" value="" type="16067" name="propName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16069" value="" type="16061" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16017" isRoot="false" isAbstract="false" name="QObject" >
     <UML:Classifier.feature>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25433" isRoot="false" isAbstract="false" name="metaObject" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29721" type="25434" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25674" isRoot="false" isAbstract="false" name="property" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29722" type="16055" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25796" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29723" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16023" isRoot="false" isAbstract="false" name="QString" />
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16042" isRoot="false" isAbstract="false" name="QStringList" />
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16046" isRoot="false" isAbstract="false" name="QMetaProperty" />
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16050" isRoot="false" isAbstract="false" name="uint" />
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16055" isRoot="false" isAbstract="false" name="QVariant" />
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16240" />
    </UML:GeneralizableElement.generalization>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16070" isRoot="false" isAbstract="false" name="ConstraintMgr" >
     <UML:Classifier.feature>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16243" isRoot="false" isAbstract="false" name="value" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29724" type="16211" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16244" value="" type="16023" name="key" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16245" isRoot="false" isAbstract="false" name="ConstraintMgr" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29725" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return true if className has a property called PropertyName with a constraint" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16246" isRoot="false" isAbstract="false" name="hasConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29726" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16247" value="" type="16023" name="className" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16248" value="" type="16023" name="propertyName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16249" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29727" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Filter method
@param theObject - the object with values to check against constraints
@param classname - the name of the class which we wish to constrain
the dataobject. If null, then defaults to whatever theObject.objectype()
returns.
@return true if the dataobject satisfies constraints for a particular
class/property set." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16250" isRoot="false" isAbstract="false" name="filter" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29728" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16252" value="" type="16251" name="theObject" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16253" value="" type="16023" name="classname" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Intraspects the properties of the prototype and inserts type-based
constraints into the constraint map for the prototype's class.
Currently only looks at enum and QDate properties.
@param prototype the object to intraspect" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16254" isRoot="false" isAbstract="false" name="addTypeConstraints" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29729" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16255" value="" type="16026" name="prototype" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Return pointer to constraint for a particular className::propertyName
@return if no constraint was set, returns a constraint
object which satisfies every possible value" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16256" isRoot="false" isAbstract="false" name="getConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29730" type="16211" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16257" value="" type="16023" name="className" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16258" value="" type="16023" name="propertyName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Convenience method which creates/sets a @ref RegexConstraint
@param regularExpression the expression to create a QRegExp from" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16259" isRoot="false" isAbstract="false" name="setRegexConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29731" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16260" value="" type="16023" name="className" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16261" value="" type="16023" name="propertyName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16262" value="" type="16023" name="regularExpression" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Convenience method which creates/sets a @ref DoubleRangeConstraint.
Assumes the property is a double type." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16263" isRoot="false" isAbstract="false" name="setDoubleRangeConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29732" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16264" value="" type="16023" name="className" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16265" value="" type="16023" name="propertyName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16266" value="" type="16012" name="lowval" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16267" value="" type="16012" name="highval" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Sets a constraint on a particular className::propertyName
" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16268" isRoot="false" isAbstract="false" name="setConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29733" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16269" value="" type="16023" name="className" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16270" value="" type="16023" name="propertyName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16271" value="" type="16211" name="constraint" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Deletes the constraint objects that were added to this structure as
well." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16272" isRoot="false" isAbstract="false" name="~ ConstraintMgr" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29734" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return the QString key we use in our dictionary for this
className::propertyName" isSpecification="false" isLeaf="false" visibility="private" xmi.id="16273" isRoot="false" isAbstract="false" name="mapKey" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29735" type="16023" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16274" value="" type="16023" name="className" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16275" value="" type="16023" name="propertyName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="private" xmi.id="16276" isRoot="false" isAbstract="false" name="ConstraintMgr" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29736" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16278" value="" type="16277" name="" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="private" xmi.id="16279" isRoot="false" isAbstract="false" name="operator =" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29737" type="16076" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16280" value="" type="16277" name="other" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16072" />
    </UML:GeneralizableElement.generalization>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16071" isRoot="false" isAbstract="false" name="ConstrainedDataObject" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16085" initialValue="" type="16070" name="smConstrMgr" ownerScope="classifier" />
      <UML:Operation comment="@return a singleton instance of a ConstraintMgr.
This particular one is checked in every call to
DataObject::setProperty()

You can add @ref Constraint instances to this,
to impose input Constraint on some DataObject-derived classes." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16075" isRoot="false" isAbstract="false" name="getConstraintMgr" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29738" type="16076" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Overrides, hides, and if it satisfies, calls the base class 
method too!
@param propertyName name of property to set
@param value value to set property
@return true if value satisfies the regexp constraint for
this property.
These methods will not be called if you use the QObject
interface." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16077" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29739" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16078" value="" type="16044" name="propName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16079" value="" type="16061" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16080" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29740" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16081" value="" type="16067" name="propName" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16082" value="" type="16061" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return a string representing any input constraints on a
particular property" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16083" isRoot="false" isAbstract="false" name="validInputs" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29741" type="16023" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16084" value="" type="16023" name="propertyName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16087" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="This is a very simple object with a single enum property, Country.
It is an example of how one can convert from QStrings
to enum values and back. It does no string hardcoding anywhere.

Since Country is derived (indirectly) from QObject, which has a private copy constructor,
the compiler-supplied copy constructor will not work here. In fact, care should
be taken to make sure that only Country references are passed to or returned from
functions." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16086" isRoot="false" isAbstract="false" name="Country" >
     <UML:Classifier.feature>
      <UML:Attribute comment="//    static QStringList smCountryNames;" isSpecification="false" visibility="private" xmi.id="16108" initialValue="" type="16090" name="mVal" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16095" isRoot="false" isAbstract="false" name="Country" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29742" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16096" value="" type="16090" name="val" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16097" isRoot="false" isAbstract="false" name="Country" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29743" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16098" value="" type="16044" name="str" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16099" isRoot="false" isAbstract="false" name="operator =" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29744" type="16102" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16101" value="" type="16100" name="newCountry" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return a list all the Country names supported" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16103" isRoot="false" isAbstract="false" name="getCountryNames" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29745" type="16042" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16104" isRoot="false" isAbstract="false" name="getVal" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29746" type="16090" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16105" isRoot="false" isAbstract="false" name="setVal" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29747" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16106" value="" type="16090" name="nc" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16107" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29748" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
     <UML:Namespace.ownedElement>
      <UML:Enumeration stereotype="16091" comment="For Q_ENUMS macro to work, we must have the
enum type definition in the same class as the Q_ENUMS" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16090" isRoot="false" isAbstract="false" name="CountryType" >
       <UML:EnumerationLiteral isSpecification="false" isLeaf="false" visibility="public" xmi.id="16092" isRoot="false" isAbstract="false" name="Undefined" />
       <UML:EnumerationLiteral isSpecification="false" isLeaf="false" visibility="public" xmi.id="16093" isRoot="false" isAbstract="false" name="USA" />
       <UML:EnumerationLiteral isSpecification="false" isLeaf="false" visibility="public" xmi.id="16094" isRoot="false" isAbstract="false" name="Canada" />
      </UML:Enumeration>
     </UML:Namespace.ownedElement>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16304" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="ObjectFactory - for creating instances of
DataObject-derived classes. In particular,
@ref Address and @ref PropsMap.

Updated for Qt4.

This particular class initializes constraints of the
various Address-types before it creates the
first instance.
It manages its own singleton instance, which is the parent of
all newly created objects. You can set the parent to another object
after it is returned.

@short Factory for creating Addresses - derive
from this and add your own other classes" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16109" isRoot="false" isAbstract="false" name="ObjectFactory" >
     <UML:Classifier.feature>
      <UML:Operation comment="return a singleton instance" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16307" isRoot="false" isAbstract="false" name="instance" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29749" type="16308" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="@return a dataobject-derived instance which
can handle the properties of className.
If the className is not a known type, it will return
an instance of @ref PropsMap, serving as a
catch-all. By default, the new object is a child of &quot;this&quot;,
which means its lifetime expires when this object is
destroyed.
Overridden versions of this class may return more specific types." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16309" isRoot="false" isAbstract="false" name="newObject" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29750" type="16058" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16310" value="" type="16023" name="className" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Here are some non-virtual methods which create some concrete
types which are found in the dataobjects library." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16311" isRoot="false" isAbstract="false" name="newAddress" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29751" type="16313" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16312" value="" type="16090" name="country" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16314" isRoot="false" isAbstract="false" name="newAddress" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29752" type="16313" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16315" value="" type="16023" name="countryName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16111" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="//start id=address/**
An abstract ConstrainedDataObject class that represents an  
Address and uses input constraints. " isSpecification="false" isLeaf="false" visibility="public" xmi.id="16110" isRoot="false" isAbstract="false" name="Address" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16129" initialValue="" type="16023" name="mLine1" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16130" initialValue="" type="16023" name="mLine2" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16131" initialValue="" type="16023" name="mCity" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16132" initialValue="" type="16023" name="mPhone" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="protected" xmi.id="16114" isRoot="false" isAbstract="false" name="Address" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29753" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16115" value="" type="16023" name="addressName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16116" isRoot="false" isAbstract="true" name="getCountry" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29754" type="16090" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16117" isRoot="false" isAbstract="false" name="getLine1" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29755" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16118" isRoot="false" isAbstract="false" name="getLine2" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29756" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16119" isRoot="false" isAbstract="false" name="getCity" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29757" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16120" isRoot="false" isAbstract="false" name="getPhone" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29758" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16121" isRoot="false" isAbstract="false" name="setLine1" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29759" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16122" value="" type="16023" name="nl1" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16123" isRoot="false" isAbstract="false" name="setLine2" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29760" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16124" value="" type="16023" name="nl2" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16125" isRoot="false" isAbstract="false" name="setCity" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29761" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16126" value="" type="16023" name="city" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16127" isRoot="false" isAbstract="false" name="setPhone" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29762" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16128" value="" type="16023" name="phone" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16134" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="//end//start id=subclass" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16133" isRoot="false" isAbstract="false" name="UsAddress" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16148" initialValue="" type="16023" name="mState" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16149" initialValue="" type="16023" name="mZip" />
      <UML:Operation comment="All new UsAddress objects
must be created indirectly through an ObjectFactory" isSpecification="false" isLeaf="false" visibility="protected" xmi.id="16137" isRoot="false" isAbstract="false" name="UsAddress" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29763" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16138" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="protected" xmi.id="16139" isRoot="false" isAbstract="false" name="getPhoneFormat" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29764" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16140" isRoot="false" isAbstract="false" name="getCountry" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29765" type="16090" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16141" isRoot="false" isAbstract="false" name="getState" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29766" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16142" isRoot="false" isAbstract="false" name="getZip" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29767" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16143" isRoot="false" isAbstract="false" name="setState" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29768" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16144" value="" type="16023" name="state" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16145" isRoot="false" isAbstract="false" name="setZip" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29769" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16146" value="" type="16023" name="zip" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="To be called once at startup, will initialize the
ConstrainedDataObject's singleton ConstraintMgr so that it
contains input constraints relating to
UsAddress.
" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16147" isRoot="false" isAbstract="false" name="initConstraints" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29770" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16151" />
    </UML:GeneralizableElement.generalization>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16150" isRoot="false" isAbstract="false" name="CanadaAddress" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16165" initialValue="" type="16023" name="mProvince" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16166" initialValue="" type="16023" name="mPostalCode" />
      <UML:Operation comment="All new CanadaAddress objects
must be created indirectly through an ObjectFactory" isSpecification="false" isLeaf="false" visibility="protected" xmi.id="16154" isRoot="false" isAbstract="false" name="CanadaAddress" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29771" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16155" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16156" isRoot="false" isAbstract="false" name="getPhoneFormat" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29772" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="To be called once at startup, will initialize the
ConstrainedDataObject's singleton ConstraintMgr so that it
contains input constraints relating to
CanadaAddress." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16157" isRoot="false" isAbstract="false" name="initConstraints" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29773" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16158" isRoot="false" isAbstract="false" name="getCountry" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29774" type="16090" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16159" isRoot="false" isAbstract="false" name="getProvince" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29775" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16160" isRoot="false" isAbstract="false" name="getPostalCode" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29776" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16161" isRoot="false" isAbstract="false" name="setProvince" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29777" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16162" value="" type="16023" name="province" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16163" isRoot="false" isAbstract="false" name="setPostalCode" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29778" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16164" value="" type="16023" name="postalcode" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16168" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="A Constraint describes a value range or set, of any type.
Constraint objects are used for validating input, as well as for querying
objects. They can operate on any @ref QVariant, in contrast to 
QValidators which operate only on QStrings. For some constraints, 
we may want a QValidator for use with Qt's text input widgets such 
as QLineEdit.
@short base class for describing value constraints
///start id=constraint" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16167" isRoot="false" isAbstract="false" name="Constraint" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16176" initialValue="" type="16010" name="mAlways" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16171" isRoot="false" isAbstract="false" name="Constraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29779" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16172" value="" type="16010" name="always" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16173" isRoot="false" isAbstract="false" name="accepts" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29780" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16174" value="" type="16055" name="value" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16175" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29781" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16178" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="//end/**
@short constraint for describing string representation of ISO Dates
" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16177" isRoot="false" isAbstract="false" name="IsoDateFormatConstraint" >
     <UML:Classifier.feature>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16181" isRoot="false" isAbstract="false" name="accepts" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29782" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16182" value="" type="16055" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16183" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29783" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16185" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="@short Constraint which simply does  @ref QRegexp.exactMatch()
on QString values" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16184" isRoot="false" isAbstract="false" name="RegexConstraint" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="protected" xmi.id="16197" initialValue="" type="16191" name="mRegExp" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16188" isRoot="false" isAbstract="false" name="RegexConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29784" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16189" value="" type="16023" name="regexp" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16190" isRoot="false" isAbstract="false" name="RegexConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29785" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16192" value="" type="16191" name="qr" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16193" isRoot="false" isAbstract="false" name="accepts" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29786" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16194" value="" type="16055" name="val" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16195" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29787" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="protected" xmi.id="16196" isRoot="false" isAbstract="false" name="RegexConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29788" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16191" isRoot="false" isAbstract="false" name="QRegExp" />
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16199" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="@short regexp constraint for matching QString against each enum value" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16198" isRoot="false" isAbstract="false" name="EnumConstraint" >
     <UML:Classifier.feature>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16202" isRoot="false" isAbstract="false" name="accepts" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29789" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16203" value="" type="16055" name="val" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16204" isRoot="false" isAbstract="false" name="EnumConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29790" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16205" value="" type="16042" name="validValues" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16207" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="@short constraint for ANDing two other constraints together" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16206" isRoot="false" isAbstract="false" name="AndConstraint" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16217" initialValue="" type="16211" name="mc1" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16218" initialValue="" type="16211" name="mc2" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16210" isRoot="false" isAbstract="false" name="AndConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29791" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16212" value="" type="16211" name="c1" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16213" value="" type="16211" name="c2" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16214" isRoot="false" isAbstract="false" name="accepts" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29792" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16215" value="" type="16055" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16216" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29793" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16220" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="@short Constraint for range of two double values" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16219" isRoot="false" isAbstract="false" name="DoubleRangeConstraint" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16229" initialValue="" type="16012" name="mLow" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16230" initialValue="" type="16012" name="mHigh" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16223" isRoot="false" isAbstract="false" name="DoubleRangeConstraint" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29794" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16224" value="" type="16012" name="low" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16225" value="" type="16012" name="high" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16226" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29795" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16227" isRoot="false" isAbstract="false" name="accepts" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29796" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16228" value="" type="16055" name="qv" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16232" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="Manages Constraints for DataObjects. 
Implemented as a simple pointer-map which maps
ClassName::PropertyName to Constraint objects.
@short manager of constraints
" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16231" isRoot="false" isAbstract="false" name="AlwaysConstraint" >
     <UML:Classifier.feature>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16235" isRoot="false" isAbstract="false" name="satisfies" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29797" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16236" value="" type="16055" name="" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16237" isRoot="false" isAbstract="false" name="toString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29798" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16238" isRoot="false" isAbstract="false" name="QHash" />
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="16282" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="A generic container of properties of an object.
This is a concrete generic @ref DataObject

This class is meant to have convenient
means of initializing non-typesafe properties,
for the purpose of importing/exporting
data to/from QObject-derived classes
with proper properties set.

This is for a DataAccessObject (DAO) framework

@author Alan Ezust

///start" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16281" isRoot="false" isAbstract="false" name="PropsMap" >
     <UML:Classifier.feature>
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16302" initialValue="" type="16301" name="mValueMap" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="16303" initialValue="" type="16023" name="mClassName" />
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16285" isRoot="false" isAbstract="false" name="PropsMap" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29799" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16286" value="" type="16023" name="classn" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16287" isRoot="false" isAbstract="false" name="PropsMap" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29800" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16288" value="" type="16026" name="other" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="return the className property, if it was
set at construction time." isSpecification="false" isLeaf="false" visibility="public" xmi.id="16289" isRoot="false" isAbstract="false" name="className" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29801" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16290" isRoot="false" isAbstract="false" name="readFrom" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29802" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16291" value="" type="16026" name="source" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16292" isRoot="false" isAbstract="false" name="property" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29803" type="16055" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16293" value="" type="16023" name="key" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16294" isRoot="false" isAbstract="false" name="propertyNames" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29804" type="16042" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="16295" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29805" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16296" value="" type="16044" name="key" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16297" value="" type="16061" name="value" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation comment="Convenience method for setting String properties" isSpecification="false" isLeaf="false" visibility="public" xmi.id="16298" isRoot="false" isAbstract="false" name="setProperty" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29806" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16299" value="" type="16044" name="key" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="16300" value="" type="16044" name="value" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="16301" isRoot="false" isAbstract="false" name="QMap" />
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="25027" />
    </UML:GeneralizableElement.generalization>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="25025" isRoot="false" isAbstract="false" name="CustomerType" >
     <UML:Classifier.feature>
      <UML:Operation stereotype="25032" isSpecification="false" isLeaf="false" visibility="public" xmi.id="25030" isRoot="false" isAbstract="false" name="CustomerType" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29807" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25031" value="" type="16007" name="value" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation stereotype="25032" isSpecification="false" isLeaf="false" visibility="public" xmi.id="25033" isRoot="false" isAbstract="false" name="CustomerType" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29808" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25034" value="" type="16023" name="ctyp" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25035" isRoot="false" isAbstract="false" name="fromString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29809" type="16010" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25036" value="" type="16023" name="ctyp" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25037" isRoot="false" isAbstract="false" name="getNames" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29810" type="16042" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="25026" isRoot="false" isAbstract="false" name="Enum" />
    <UML:GeneralizableElement.generalization>
     <UML:Generalization xmi.idref="25039" />
    </UML:GeneralizableElement.generalization>
    <UML:Class comment="//start id=friend" isSpecification="false" isLeaf="false" visibility="public" xmi.id="25038" isRoot="false" isAbstract="false" name="Customer" >
     <UML:Classifier.feature>
      <UML:Attribute comment="//    QMap&lt;QString, Address*> mAddress;" isSpecification="false" visibility="private" xmi.id="25072" initialValue="" type="16023" name="mId" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="25073" initialValue="" type="25054" name="mDateEstablished" />
      <UML:Attribute isSpecification="false" visibility="private" xmi.id="25074" initialValue="" type="25025" name="mType" />
      <UML:Operation stereotype="25032" isSpecification="false" isLeaf="false" visibility="protected" xmi.id="25043" isRoot="false" isAbstract="false" name="Customer" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29811" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25044" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation stereotype="25032" isSpecification="false" isLeaf="false" visibility="protected" xmi.id="25045" isRoot="false" isAbstract="false" name="Customer" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29812" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25046" value="" type="16023" name="name" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25047" value="" type="16023" name="id" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25048" value="" type="25025" name="type" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25049" isRoot="false" isAbstract="false" name="getAddress" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29813" type="16313" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25050" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25051" isRoot="false" isAbstract="false" name="getName" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29814" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25052" isRoot="false" isAbstract="false" name="getId" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29815" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25053" isRoot="false" isAbstract="false" name="getDateEstablished" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29816" type="25054" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25055" isRoot="false" isAbstract="false" name="getType" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29817" type="25025" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25056" isRoot="false" isAbstract="false" name="getTypeString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29818" type="16023" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25057" isRoot="false" isAbstract="false" name="test" ownerScope="classifier" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29819" type="16022" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25058" isRoot="false" isAbstract="false" name="setName" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29820" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25059" value="" type="16044" name="newName" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25060" isRoot="false" isAbstract="false" name="setId" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29821" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25061" value="" type="16044" name="newId" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25062" isRoot="false" isAbstract="false" name="setDateEstablished" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29822" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25064" value="" type="25063" name="newDate" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25065" isRoot="false" isAbstract="false" name="setAddress" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29823" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25066" value="" type="16313" name="address" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25067" value="" type="16023" name="name" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25068" isRoot="false" isAbstract="false" name="setType" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29824" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25069" value="" type="25025" name="newType" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
      <UML:Operation isSpecification="false" isLeaf="false" visibility="public" xmi.id="25070" isRoot="false" isAbstract="false" name="setTypeString" >
       <UML:BehavioralFeature.parameter>
        <UML:Parameter kind="return" xmi.id="29825" type="16022" />
        <UML:Parameter isSpecification="false" visibility="private" xmi.id="25071" value="" type="16023" name="newType" />
       </UML:BehavioralFeature.parameter>
      </UML:Operation>
     </UML:Classifier.feature>
    </UML:Class>
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="25042" isRoot="false" isAbstract="false" name="CustomerFactory" />
    <UML:Class isSpecification="false" isLeaf="false" visibility="public" xmi.id="25054" isRoot="false" isAbstract="false" name="QDate" />
    <UML:Generalization isSpecification="false" child="16016" visibility="public" xmi.id="16018" parent="16017" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16071" visibility="public" xmi.id="16072" parent="16016" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16086" visibility="public" xmi.id="16087" parent="16016" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16110" visibility="public" xmi.id="16111" parent="16071" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16133" visibility="public" xmi.id="16134" parent="16110" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16150" visibility="public" xmi.id="16151" parent="16110" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16167" visibility="public" xmi.id="16168" parent="16017" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16177" visibility="public" xmi.id="16178" parent="16167" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16184" visibility="public" xmi.id="16185" parent="16167" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16198" visibility="public" xmi.id="16199" parent="16184" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16206" visibility="public" xmi.id="16207" parent="16167" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16219" visibility="public" xmi.id="16220" parent="16167" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16231" visibility="public" xmi.id="16232" parent="16167" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16070" visibility="public" xmi.id="16240" parent="16239" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16281" visibility="public" xmi.id="16282" parent="16016" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="16109" visibility="public" xmi.id="16304" parent="16017" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="25025" visibility="public" xmi.id="25027" parent="25026" discriminator="" name="" />
    <UML:Generalization isSpecification="false" child="25038" visibility="public" xmi.id="25039" parent="16016" discriminator="" name="" />
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello" >
  <docsettings viewid="25075" documentation="" uniqueid="29825" />
  <diagrams>
   <diagram snapgrid="1" showattsig="1" fillcolor="#ffffc0" linewidth="0" zoom="100" showgrid="1" showopsig="1" usefillcolor="1" snapx="10" canvaswidth="764" snapy="10" showatts="1" xmi.id="16006" documentation="" type="402" showops="1" showpackage="0" name="address" localid="900000" showstereotype="0" showscope="1" snapcsgrid="0" font="Bitstream Vera Sans,12,-1,5,50,0,0,0,0,0" linecolor="#ff0000" canvasheight="515" >
    <widgets>
     <classwidget usesdiagramfillcolour="1" width="97" showattsigs="601" usesdiagramusefillcolour="1" x="82" linecolour="none" y="7" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="46" usefillcolor="1" showpubliconly="0" showattributes="0" isinstance="0" xmi.id="16016" showoperations="0" showpackage="0" showscope="1" showstereotype="0" font="Bitstream Vera Sans,12,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="224" showattsigs="601" usesdiagramusefillcolour="1" x="18" linecolour="none" y="86" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="108" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="16071" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Bitstream Vera Sans,12,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="143" showattsigs="601" usesdiagramusefillcolour="1" x="119" linecolour="none" y="241" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="99" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="16110" showoperations="0" showpackage="0" showscope="1" showstereotype="0" font="Bitstream Vera Sans,12,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="134" showattsigs="601" usesdiagramusefillcolour="1" x="33" linecolour="none" y="389" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="63" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="16133" showoperations="0" showpackage="0" showscope="1" showstereotype="0" font="Bitstream Vera Sans,12,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="177" showattsigs="601" usesdiagramusefillcolour="1" x="192" linecolour="none" y="389" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="63" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="16150" showoperations="0" showpackage="0" showscope="1" showstereotype="0" font="Bitstream Vera Sans,12,-1,5,75,0,0,0,0,0" />
     <classwidget usesdiagramfillcolour="1" width="251" showattsigs="601" usesdiagramusefillcolour="1" x="345" linecolour="none" y="71" showopsigs="600" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="1" fillcolour="none" height="279" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="16070" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Bitstream Vera Sans,12,-1,5,75,0,0,0,0,0" />
    </widgets>
    <messages/>
    <associations>
     <assocwidget totalcounta="2" indexa="1" totalcountb="2" indexb="1" widgetbid="16016" widgetaid="16071" xmi.id="16072" >
      <linepath>
       <startpoint startx="130" starty="86" />
       <endpoint endx="130" endy="53" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="2" indexb="1" widgetbid="16071" widgetaid="16110" xmi.id="16111" >
      <linepath>
       <startpoint startx="190" starty="241" />
       <endpoint endx="130" endy="194" />
       <point x="190" y="220" />
       <point x="130" y="220" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="3" indexb="1" widgetbid="16110" widgetaid="16133" xmi.id="16134" >
      <linepath>
       <startpoint startx="100" starty="389" />
       <endpoint endx="170" endy="340" />
       <point x="100" y="360" />
       <point x="170" y="360" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" totalcountb="3" indexb="2" widgetbid="16110" widgetaid="16150" xmi.id="16151" >
      <linepath>
       <startpoint startx="280" starty="389" />
       <endpoint endx="210" endy="340" />
       <point x="280" y="360" />
       <point x="210" y="360" />
      </linepath>
     </assocwidget>
     <assocwidget totalcounta="2" indexa="1" visibilityB="200" totalcountb="2" indexb="1" widgetbid="16070" widgetaid="16071" xmi.id="16085" type="510" changeabilityA="900" changeabilityB="900" visibilityA="200" >
      <linepath>
       <startpoint startx="242" starty="140" />
       <endpoint endx="345" endy="210" />
       <point x="270" y="140" />
       <point x="270" y="210" />
      </linepath>
      <floatingtext usesdiagramfillcolour="1" width="113" usesdiagramusefillcolour="1" x="234" linecolour="none" y="209" linewidth="none" usesdiagramlinewidth="1" posttext="" usesdiagramlinecolour="1" role="710" fillcolour="none" height="22" usefillcolor="1" pretext="+" isinstance="0" xmi.id="29459" text="smConstrMgr" font="Bitstream Vera Sans,12,-1,5,50,0,0,0,0,0" />
     </assocwidget>
    </associations>
   </diagram>
   <diagram snapgrid="0" showattsig="1" fillcolor="#ffffc0" linewidth="0" zoom="100" showgrid="0" showopsig="1" usefillcolor="1" snapx="10" canvaswidth="764" snapy="10" showatts="1" xmi.id="25075" documentation="" type="402" showops="1" showpackage="0" name="metaobjects" localid="900000" showstereotype="0" showscope="1" snapcsgrid="0" font="Sans Serif,12,-1,5,50,0,0,0,0,0" linecolor="#0e3aff" canvasheight="515" >
    <widgets>
     <classwidget usesdiagramfillcolour="0" width="254" showattsigs="601" usesdiagramusefillcolour="0" x="38" linecolour="#0e3aff" y="34" showopsigs="601" linewidth="none" usesdiagramlinewidth="1" usesdiagramlinecolour="0" fillcolour="#ffffc0" height="81" usefillcolor="1" showpubliconly="0" showattributes="1" isinstance="0" xmi.id="16017" showoperations="1" showpackage="0" showscope="1" showstereotype="0" font="Sans Serif,12,-1,5,75,0,0,0,0,0" />
    </widgets>
    <messages/>
    <associations/>
   </diagram>
  </diagrams>
  <listview>
   <listitem open="1" type="800" label="Views" >
    <listitem open="1" type="801" label="Logical View" >
     <listitem open="0" type="813" id="16110" >
      <listitem open="0" type="814" id="16129" />
      <listitem open="0" type="814" id="16130" />
      <listitem open="0" type="814" id="16131" />
      <listitem open="0" type="814" id="16132" />
      <listitem open="0" type="815" id="16114" />
      <listitem open="0" type="815" id="16116" />
      <listitem open="0" type="815" id="16117" />
      <listitem open="0" type="815" id="16118" />
      <listitem open="0" type="815" id="16119" />
      <listitem open="0" type="815" id="16120" />
      <listitem open="0" type="815" id="16121" />
      <listitem open="0" type="815" id="16123" />
      <listitem open="0" type="815" id="16125" />
      <listitem open="0" type="815" id="16127" />
     </listitem>
     <listitem open="0" type="813" id="16231" >
      <listitem open="0" type="815" id="16235" />
      <listitem open="0" type="815" id="16237" />
     </listitem>
     <listitem open="0" type="813" id="16206" >
      <listitem open="0" type="814" id="16217" />
      <listitem open="0" type="814" id="16218" />
      <listitem open="0" type="815" id="16210" />
      <listitem open="0" type="815" id="16214" />
      <listitem open="0" type="815" id="16216" />
     </listitem>
     <listitem open="0" type="813" id="16150" >
      <listitem open="0" type="814" id="16165" />
      <listitem open="0" type="814" id="16166" />
      <listitem open="0" type="815" id="16154" />
      <listitem open="0" type="815" id="16156" />
      <listitem open="0" type="815" id="16157" />
      <listitem open="0" type="815" id="16158" />
      <listitem open="0" type="815" id="16159" />
      <listitem open="0" type="815" id="16160" />
      <listitem open="0" type="815" id="16161" />
      <listitem open="0" type="815" id="16163" />
     </listitem>
     <listitem open="0" type="813" id="16071" >
      <listitem open="0" type="814" id="16085" />
      <listitem open="0" type="815" id="16075" />
      <listitem open="0" type="815" id="16077" />
      <listitem open="0" type="815" id="16080" />
      <listitem open="0" type="815" id="16083" />
     </listitem>
     <listitem open="0" type="813" id="16167" >
      <listitem open="0" type="814" id="16176" />
      <listitem open="0" type="815" id="16171" />
      <listitem open="0" type="815" id="16173" />
      <listitem open="0" type="815" id="16175" />
     </listitem>
     <listitem open="0" type="813" id="16070" >
      <listitem open="0" type="815" id="16243" />
      <listitem open="0" type="815" id="16245" />
      <listitem open="0" type="815" id="16246" />
      <listitem open="0" type="815" id="16249" />
      <listitem open="0" type="815" id="16250" />
      <listitem open="0" type="815" id="16254" />
      <listitem open="0" type="815" id="16256" />
      <listitem open="0" type="815" id="16259" />
      <listitem open="0" type="815" id="16263" />
      <listitem open="0" type="815" id="16268" />
      <listitem open="0" type="815" id="16272" />
      <listitem open="0" type="815" id="16273" />
      <listitem open="0" type="815" id="16276" />
      <listitem open="0" type="815" id="16279" />
     </listitem>
     <listitem open="0" type="813" id="16086" >
      <listitem open="0" type="814" id="16108" />
      <listitem open="0" type="815" id="16095" />
      <listitem open="0" type="815" id="16097" />
      <listitem open="0" type="815" id="16099" />
      <listitem open="0" type="815" id="16103" />
      <listitem open="0" type="815" id="16104" />
      <listitem open="0" type="815" id="16105" />
      <listitem open="0" type="815" id="16107" />
      <listitem open="0" type="831" id="16090" >
       <listitem open="0" type="-1" id="16092" />
       <listitem open="0" type="-1" id="16093" />
       <listitem open="0" type="-1" id="16094" />
      </listitem>
     </listitem>
     <listitem open="0" type="813" id="25038" >
      <listitem open="0" type="814" id="25072" />
      <listitem open="0" type="814" id="25073" />
      <listitem open="0" type="814" id="25074" />
      <listitem open="0" type="815" id="25043" />
      <listitem open="0" type="815" id="25045" />
      <listitem open="0" type="815" id="25049" />
      <listitem open="0" type="815" id="25051" />
      <listitem open="0" type="815" id="25052" />
      <listitem open="0" type="815" id="25053" />
      <listitem open="0" type="815" id="25055" />
      <listitem open="0" type="815" id="25056" />
      <listitem open="0" type="815" id="25057" />
      <listitem open="0" type="815" id="25058" />
      <listitem open="0" type="815" id="25060" />
      <listitem open="0" type="815" id="25062" />
      <listitem open="0" type="815" id="25065" />
      <listitem open="0" type="815" id="25068" />
      <listitem open="0" type="815" id="25070" />
     </listitem>
     <listitem open="0" type="813" id="25042" />
     <listitem open="0" type="813" id="25025" >
      <listitem open="0" type="815" id="25030" />
      <listitem open="0" type="815" id="25033" />
      <listitem open="0" type="815" id="25035" />
      <listitem open="0" type="815" id="25037" />
     </listitem>
     <listitem open="0" type="813" id="16016" >
      <listitem open="0" type="815" id="16021" />
      <listitem open="0" type="815" id="16025" />
      <listitem open="0" type="815" id="16028" />
      <listitem open="0" type="815" id="16031" />
      <listitem open="0" type="815" id="16034" />
      <listitem open="0" type="815" id="16038" />
      <listitem open="0" type="815" id="16040" />
      <listitem open="0" type="815" id="16041" />
      <listitem open="0" type="815" id="16043" />
      <listitem open="0" type="815" id="16047" />
      <listitem open="0" type="815" id="16049" />
      <listitem open="0" type="815" id="16051" />
      <listitem open="0" type="815" id="16053" />
      <listitem open="0" type="815" id="16056" />
      <listitem open="0" type="815" id="16059" />
      <listitem open="0" type="815" id="16063" />
      <listitem open="0" type="815" id="16066" />
     </listitem>
     <listitem open="0" type="813" id="16219" >
      <listitem open="0" type="814" id="16229" />
      <listitem open="0" type="814" id="16230" />
      <listitem open="0" type="815" id="16223" />
      <listitem open="0" type="815" id="16226" />
      <listitem open="0" type="815" id="16227" />
     </listitem>
     <listitem open="0" type="813" id="25026" />
     <listitem open="0" type="813" id="16198" >
      <listitem open="0" type="815" id="16202" />
      <listitem open="0" type="815" id="16204" />
     </listitem>
     <listitem open="0" type="813" id="16177" >
      <listitem open="0" type="815" id="16181" />
      <listitem open="0" type="815" id="16183" />
     </listitem>
     <listitem open="0" type="813" id="16109" >
      <listitem open="0" type="815" id="16307" />
      <listitem open="0" type="815" id="16309" />
      <listitem open="0" type="815" id="16311" />
      <listitem open="0" type="815" id="16314" />
     </listitem>
     <listitem open="0" type="813" id="16281" >
      <listitem open="0" type="814" id="16302" />
      <listitem open="0" type="814" id="16303" />
      <listitem open="0" type="815" id="16285" />
      <listitem open="0" type="815" id="16287" />
      <listitem open="0" type="815" id="16289" />
      <listitem open="0" type="815" id="16290" />
      <listitem open="0" type="815" id="16292" />
      <listitem open="0" type="815" id="16294" />
      <listitem open="0" type="815" id="16295" />
      <listitem open="0" type="815" id="16298" />
     </listitem>
     <listitem open="0" type="813" id="25054" />
     <listitem open="0" type="813" id="16238" />
     <listitem open="0" type="813" id="16301" />
     <listitem open="0" type="813" id="16046" />
     <listitem open="0" type="813" id="16017" >
      <listitem open="0" type="815" id="25433" />
      <listitem open="0" type="815" id="25674" />
      <listitem open="0" type="815" id="25796" />
     </listitem>
     <listitem open="0" type="813" id="16191" />
     <listitem open="0" type="813" id="16023" />
     <listitem open="0" type="813" id="16042" />
     <listitem open="0" type="813" id="16055" />
     <listitem open="0" type="813" id="16184" >
      <listitem open="0" type="814" id="16197" />
      <listitem open="0" type="815" id="16188" />
      <listitem open="0" type="815" id="16190" />
      <listitem open="0" type="815" id="16193" />
      <listitem open="0" type="815" id="16195" />
      <listitem open="0" type="815" id="16196" />
     </listitem>
     <listitem open="0" type="813" id="16133" >
      <listitem open="0" type="814" id="16148" />
      <listitem open="0" type="814" id="16149" />
      <listitem open="0" type="815" id="16137" />
      <listitem open="0" type="815" id="16139" />
      <listitem open="0" type="815" id="16140" />
      <listitem open="0" type="815" id="16141" />
      <listitem open="0" type="815" id="16142" />
      <listitem open="0" type="815" id="16143" />
      <listitem open="0" type="815" id="16145" />
      <listitem open="0" type="815" id="16147" />
     </listitem>
     <listitem open="0" type="813" id="16050" />
     <listitem open="0" type="830" label="Datatypes" >
      <listitem open="0" type="829" id="16313" />
      <listitem open="0" type="829" id="16211" />
      <listitem open="0" type="829" id="16076" />
      <listitem open="0" type="829" id="16102" />
      <listitem open="0" type="829" id="16058" />
      <listitem open="0" type="829" id="16308" />
      <listitem open="0" type="829" id="16239" />
      <listitem open="0" type="829" id="25434" />
      <listitem open="0" type="829" id="16029" />
      <listitem open="0" type="829" id="16032" />
      <listitem open="0" type="829" id="16010" />
      <listitem open="0" type="829" id="16009" />
      <listitem open="0" type="829" id="16277" />
      <listitem open="0" type="829" id="16100" />
      <listitem open="0" type="829" id="16035" />
      <listitem open="0" type="829" id="16251" />
      <listitem open="0" type="829" id="25063" />
      <listitem open="0" type="829" id="16026" />
      <listitem open="0" type="829" id="16044" />
      <listitem open="0" type="829" id="16061" />
      <listitem open="0" type="829" id="16067" />
      <listitem open="0" type="829" id="16012" />
      <listitem open="0" type="829" id="16011" />
      <listitem open="0" type="829" id="16007" />
      <listitem open="0" type="829" id="16013" />
      <listitem open="0" type="829" id="16014" />
      <listitem open="0" type="829" id="16015" />
      <listitem open="0" type="829" id="16022" />
     </listitem>
    </listitem>
    <listitem open="1" type="802" label="Use Case View" />
    <listitem open="1" type="821" label="Component View" />
    <listitem open="1" type="827" label="Deployment View" />
    <listitem open="1" type="836" label="Entity Relationship Model" />
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Python" />
   <codegenerator language="Cpp" >
    <classifiercodedocument writeOutCode="true" package="" id="16016" parent_class="16016" fileExt=".cpp" fileName="dataobject" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dataobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16021" tag="operation_16021" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16025" tag="operation_16025" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Reads all the properties from the source object (using intraspection)&amp;#010;and saves them to our object." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16028" tag="operation_16028" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="writes all our properties into a QObject&amp;#010;@return true if successful in setting all properties." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16031" tag="operation_16031" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="iterates through the wayward and steals all its children,&amp;#010;reparenting them under &quot;this&quot;&amp;#010;@param wayward - another QObject which has children we wish to add&amp;#010;to this. The wayward loses children." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16034" tag="operation_16034" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@param compareChildren if true recursively checks children&amp;#010;@return true if other has the same property values&amp;#010;as this." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16038" tag="operation_16038" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16040" tag="operation_16040" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16041" tag="operation_16041" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return a list of propertyNames, so that the user of DataObject does not need to&amp;#010;use a @ref QMetaObject just to get a list of property names." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16043" tag="operation_16043" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="public convenience functions that return the QMetaProperty for a given&amp;#010;propertyname (or index).." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16047" tag="operation_16047" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16049" tag="operation_16049" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return number of properties.&amp;#010;@param superclass include superclass inherited properties in the count&amp;#010;(currently ignored)" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16051" tag="operation_16051" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return human and machine readable representation of this object (XML format)" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16053" tag="operation_16053" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16056" tag="operation_16056" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Polymorphic clone() method - derived versions can return&amp;#010;more specific types, and perform deep or shallow clones as&amp;#010;required" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16059" tag="operation_16059" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16063" tag="operation_16063" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Overrides, hides, and if it satisfies, calls the base class method too!&amp;#010;@param propertyName name of property to set&amp;#010;@param value value to set property&amp;#010;@return true if value satisfies the regexp constraint for&amp;#010;this property.&amp;#010;&amp;#010;NOTE: Qt3's QObject had these as virtual, but in Qt4, they are non-virtual.&amp;#010;This means these methods will not be called if you use the QObject&amp;#010;interface.&amp;#010;" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16066" tag="operation_16066" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16017" parent_class="16017" fileExt=".cpp" fileName="qobject" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="25433" tag="operation_25433" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25674" tag="operation_25674" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25796" tag="operation_25796" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16023" parent_class="16023" fileExt=".cpp" fileName="qstring" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QString.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16042" parent_class="16042" fileExt=".cpp" fileName="qstringlist" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qstringlist.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QStringList.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16046" parent_class="16046" fileExt=".cpp" fileName="qmetaproperty" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qmetaproperty.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QMetaProperty.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16050" parent_class="16050" fileExt=".cpp" fileName="uint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;uint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			uint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16055" parent_class="16055" fileExt=".cpp" fileName="qvariant" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qvariant.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QVariant.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16070" parent_class="16070" fileExt=".cpp" fileName="constraintmgr" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;constraintmgr.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16245" tag="operation_16245" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16276" tag="operation_16276" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16243" tag="operation_16243" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16246" tag="operation_16246" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return true if className has a property called PropertyName with a constraint" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16249" tag="operation_16249" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16250" tag="operation_16250" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Filter method&amp;#010;@param theObject - the object with values to check against constraints&amp;#010;@param classname - the name of the class which we wish to constrain&amp;#010;the dataobject. If null, then defaults to whatever theObject.objectype()&amp;#010;returns.&amp;#010;@return true if the dataobject satisfies constraints for a particular&amp;#010;class/property set." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16254" tag="operation_16254" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Intraspects the properties of the prototype and inserts type-based&amp;#010;constraints into the constraint map for the prototype's class.&amp;#010;Currently only looks at enum and QDate properties.&amp;#010;@param prototype the object to intraspect" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16256" tag="operation_16256" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Return pointer to constraint for a particular className::propertyName&amp;#010;@return if no constraint was set, returns a constraint&amp;#010;object which satisfies every possible value" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16259" tag="operation_16259" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Convenience method which creates/sets a @ref RegexConstraint&amp;#010;@param regularExpression the expression to create a QRegExp from" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16263" tag="operation_16263" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Convenience method which creates/sets a @ref DoubleRangeConstraint.&amp;#010;Assumes the property is a double type." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16268" tag="operation_16268" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Sets a constraint on a particular className::propertyName&amp;#010;" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16272" tag="operation_16272" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Deletes the constraint objects that were added to this structure as&amp;#010;well." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16273" tag="operation_16273" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return the QString key we use in our dictionary for this&amp;#010;className::propertyName" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16279" tag="operation_16279" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16071" parent_class="16071" fileExt=".cpp" fileName="constraineddataobject" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;constraineddataobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16075" tag="operation_16075" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return a singleton instance of a ConstraintMgr.&amp;#010;This particular one is checked in every call to&amp;#010;DataObject::setProperty()&amp;#010;&amp;#010;You can add @ref Constraint instances to this,&amp;#010;to impose input Constraint on some DataObject-derived classes." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16077" tag="operation_16077" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Overrides, hides, and if it satisfies, calls the base class &amp;#010;method too!&amp;#010;@param propertyName name of property to set&amp;#010;@param value value to set property&amp;#010;@return true if value satisfies the regexp constraint for&amp;#010;this property.&amp;#010;These methods will not be called if you use the QObject&amp;#010;interface." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16080" tag="operation_16080" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16083" tag="operation_16083" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return a string representing any input constraints on a&amp;#010;particular property" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16085" tag="hblock_tag_0" canDelete="false" classfield_id="16085" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16085" tag="hblock_tag_1" canDelete="false" classfield_id="16085" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16085" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16085" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16085" tag="hblock_tag_0" canDelete="false" classfield_id="16085" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16085" tag="hblock_tag_1" canDelete="false" classfield_id="16085" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16086" parent_class="16086" fileExt=".cpp" fileName="country" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;country.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16095" tag="operation_16095" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16097" tag="operation_16097" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16099" tag="operation_16099" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16103" tag="operation_16103" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return a list all the Country names supported" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16104" tag="operation_16104" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16105" tag="operation_16105" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16107" tag="operation_16107" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16108" tag="hblock_tag_0" canDelete="false" classfield_id="16108" >
         <header>
          <cppcodedocumentation tag="" text="Get the value of mVal&amp;#010;//    static QStringList smCountryNames;&amp;#010;@return the value of mVal" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16108" tag="hblock_tag_1" canDelete="false" classfield_id="16108" >
         <header>
          <cppcodedocumentation tag="" text="Set the value of mVal&amp;#010;//    static QStringList smCountryNames;&amp;#010;@param value the value of mVal" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			country.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16108" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" text="//    static QStringList smCountryNames;" />
       </header>
       <ccfdeclarationcodeblock parent_id="16108" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16108" tag="hblock_tag_0" canDelete="false" classfield_id="16108" >
        <header>
         <cppcodedocumentation tag="" text="Get the value of mVal&amp;#010;//    static QStringList smCountryNames;&amp;#010;@return the value of mVal" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16108" tag="hblock_tag_1" canDelete="false" classfield_id="16108" >
        <header>
         <cppcodedocumentation tag="" text="Set the value of mVal&amp;#010;//    static QStringList smCountryNames;&amp;#010;@param value the value of mVal" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16109" parent_class="16109" fileExt=".cpp" fileName="objectfactory" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;objectfactory.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16307" tag="operation_16307" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="return a singleton instance" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16309" tag="operation_16309" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@return a dataobject-derived instance which&amp;#010;can handle the properties of className.&amp;#010;If the className is not a known type, it will return&amp;#010;an instance of @ref PropsMap, serving as a&amp;#010;catch-all. By default, the new object is a child of &quot;this&quot;,&amp;#010;which means its lifetime expires when this object is&amp;#010;destroyed.&amp;#010;Overridden versions of this class may return more specific types." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16311" tag="operation_16311" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Here are some non-virtual methods which create some concrete&amp;#010;types which are found in the dataobjects library." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16314" tag="operation_16314" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			objectfactory.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:43&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16110" parent_class="16110" fileExt=".cpp" fileName="address" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;address.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16114" tag="operation_16114" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16116" tag="operation_16116" canDelete="false" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16117" tag="operation_16117" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16118" tag="operation_16118" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16119" tag="operation_16119" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16120" tag="operation_16120" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16121" tag="operation_16121" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16123" tag="operation_16123" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16125" tag="operation_16125" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16127" tag="operation_16127" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16129" tag="hblock_tag_0" canDelete="false" classfield_id="16129" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16129" tag="hblock_tag_1" canDelete="false" classfield_id="16129" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16130" tag="hblock_tag_2" canDelete="false" classfield_id="16130" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16130" tag="hblock_tag_3" canDelete="false" classfield_id="16130" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16131" tag="hblock_tag_4" canDelete="false" classfield_id="16131" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16131" tag="hblock_tag_5" canDelete="false" classfield_id="16131" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16132" tag="hblock_tag_6" canDelete="false" classfield_id="16132" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16132" tag="hblock_tag_7" canDelete="false" classfield_id="16132" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16129" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16129" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16129" tag="hblock_tag_0" canDelete="false" classfield_id="16129" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16129" tag="hblock_tag_1" canDelete="false" classfield_id="16129" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16130" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16130" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16130" tag="hblock_tag_2" canDelete="false" classfield_id="16130" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16130" tag="hblock_tag_3" canDelete="false" classfield_id="16130" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16131" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16131" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16131" tag="hblock_tag_4" canDelete="false" classfield_id="16131" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16131" tag="hblock_tag_5" canDelete="false" classfield_id="16131" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16132" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16132" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16132" tag="hblock_tag_6" canDelete="false" classfield_id="16132" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16132" tag="hblock_tag_7" canDelete="false" classfield_id="16132" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16133" parent_class="16133" fileExt=".cpp" fileName="usaddress" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;usaddress.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16137" tag="operation_16137" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="All new UsAddress objects&amp;#010;must be created indirectly through an ObjectFactory" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16139" tag="operation_16139" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16140" tag="operation_16140" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16141" tag="operation_16141" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16142" tag="operation_16142" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16143" tag="operation_16143" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16145" tag="operation_16145" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16147" tag="operation_16147" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="To be called once at startup, will initialize the&amp;#010;ConstrainedDataObject's singleton ConstraintMgr so that it&amp;#010;contains input constraints relating to&amp;#010;UsAddress.&amp;#010;" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16148" tag="hblock_tag_0" canDelete="false" classfield_id="16148" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16148" tag="hblock_tag_1" canDelete="false" classfield_id="16148" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16149" tag="hblock_tag_2" canDelete="false" classfield_id="16149" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16149" tag="hblock_tag_3" canDelete="false" classfield_id="16149" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16148" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16148" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16148" tag="hblock_tag_0" canDelete="false" classfield_id="16148" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16148" tag="hblock_tag_1" canDelete="false" classfield_id="16148" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16149" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16149" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16149" tag="hblock_tag_2" canDelete="false" classfield_id="16149" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16149" tag="hblock_tag_3" canDelete="false" classfield_id="16149" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16150" parent_class="16150" fileExt=".cpp" fileName="canadaaddress" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;canadaaddress.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16154" tag="operation_16154" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="All new CanadaAddress objects&amp;#010;must be created indirectly through an ObjectFactory" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16156" tag="operation_16156" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16157" tag="operation_16157" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="To be called once at startup, will initialize the&amp;#010;ConstrainedDataObject's singleton ConstraintMgr so that it&amp;#010;contains input constraints relating to&amp;#010;CanadaAddress." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16158" tag="operation_16158" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16159" tag="operation_16159" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16160" tag="operation_16160" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16161" tag="operation_16161" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16163" tag="operation_16163" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16165" tag="hblock_tag_0" canDelete="false" classfield_id="16165" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16165" tag="hblock_tag_1" canDelete="false" classfield_id="16165" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16166" tag="hblock_tag_2" canDelete="false" classfield_id="16166" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16166" tag="hblock_tag_3" canDelete="false" classfield_id="16166" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16165" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16165" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16165" tag="hblock_tag_0" canDelete="false" classfield_id="16165" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16165" tag="hblock_tag_1" canDelete="false" classfield_id="16165" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16166" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16166" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16166" tag="hblock_tag_2" canDelete="false" classfield_id="16166" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16166" tag="hblock_tag_3" canDelete="false" classfield_id="16166" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16167" parent_class="16167" fileExt=".cpp" fileName="constraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;constraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16171" tag="operation_16171" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16173" tag="operation_16173" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16175" tag="operation_16175" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16176" tag="hblock_tag_0" canDelete="false" classfield_id="16176" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16176" tag="hblock_tag_1" canDelete="false" classfield_id="16176" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			constraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16176" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16176" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16176" tag="hblock_tag_0" canDelete="false" classfield_id="16176" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16176" tag="hblock_tag_1" canDelete="false" classfield_id="16176" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16177" parent_class="16177" fileExt=".cpp" fileName="isodateformatconstraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;isodateformatconstraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16181" tag="operation_16181" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16183" tag="operation_16183" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			isodateformatconstraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16184" parent_class="16184" fileExt=".cpp" fileName="regexconstraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;regexconstraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16188" tag="operation_16188" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16190" tag="operation_16190" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16196" tag="operation_16196" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16193" tag="operation_16193" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16195" tag="operation_16195" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16197" tag="hblock_tag_0" canDelete="false" classfield_id="16197" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16197" tag="hblock_tag_1" canDelete="false" classfield_id="16197" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			regexconstraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16197" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16197" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16197" tag="hblock_tag_0" canDelete="false" classfield_id="16197" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16197" tag="hblock_tag_1" canDelete="false" classfield_id="16197" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16191" parent_class="16191" fileExt=".cpp" fileName="qregexp" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qregexp.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QRegExp.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16198" parent_class="16198" fileExt=".cpp" fileName="enumconstraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;enumconstraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16204" tag="operation_16204" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16202" tag="operation_16202" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			enumconstraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16206" parent_class="16206" fileExt=".cpp" fileName="andconstraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;andconstraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16210" tag="operation_16210" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16214" tag="operation_16214" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16216" tag="operation_16216" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16217" tag="hblock_tag_0" canDelete="false" classfield_id="16217" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16217" tag="hblock_tag_1" canDelete="false" classfield_id="16217" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16218" tag="hblock_tag_2" canDelete="false" classfield_id="16218" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16218" tag="hblock_tag_3" canDelete="false" classfield_id="16218" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			andconstraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16217" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16217" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16217" tag="hblock_tag_0" canDelete="false" classfield_id="16217" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16217" tag="hblock_tag_1" canDelete="false" classfield_id="16217" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16218" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16218" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16218" tag="hblock_tag_2" canDelete="false" classfield_id="16218" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16218" tag="hblock_tag_3" canDelete="false" classfield_id="16218" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16219" parent_class="16219" fileExt=".cpp" fileName="doublerangeconstraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;doublerangeconstraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16223" tag="operation_16223" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16226" tag="operation_16226" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16227" tag="operation_16227" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16229" tag="hblock_tag_0" canDelete="false" classfield_id="16229" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16229" tag="hblock_tag_1" canDelete="false" classfield_id="16229" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16230" tag="hblock_tag_2" canDelete="false" classfield_id="16230" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16230" tag="hblock_tag_3" canDelete="false" classfield_id="16230" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			doublerangeconstraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16229" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16229" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16229" tag="hblock_tag_0" canDelete="false" classfield_id="16229" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16229" tag="hblock_tag_1" canDelete="false" classfield_id="16229" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16230" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16230" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16230" tag="hblock_tag_2" canDelete="false" classfield_id="16230" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16230" tag="hblock_tag_3" canDelete="false" classfield_id="16230" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16231" parent_class="16231" fileExt=".cpp" fileName="alwaysconstraint" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;alwaysconstraint.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16235" tag="operation_16235" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16237" tag="operation_16237" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			alwaysconstraint.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16238" parent_class="16238" fileExt=".cpp" fileName="qhash" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qhash.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QHash.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16281" parent_class="16281" fileExt=".cpp" fileName="propsmap" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;propsmap.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="16285" tag="operation_16285" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16287" tag="operation_16287" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="16289" tag="operation_16289" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="return the className property, if it was&amp;#010;set at construction time." />
         </header>
        </codeoperation>
        <codeoperation parent_id="16290" tag="operation_16290" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16292" tag="operation_16292" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16294" tag="operation_16294" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16295" tag="operation_16295" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="16298" tag="operation_16298" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Convenience method for setting String properties" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="16302" tag="hblock_tag_0" canDelete="false" classfield_id="16302" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16302" tag="hblock_tag_1" canDelete="false" classfield_id="16302" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="16303" tag="hblock_tag_2" canDelete="false" classfield_id="16303" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="16303" tag="hblock_tag_3" canDelete="false" classfield_id="16303" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			propsmap.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16302" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16302" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16302" tag="hblock_tag_0" canDelete="false" classfield_id="16302" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16302" tag="hblock_tag_1" canDelete="false" classfield_id="16302" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16303" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16303" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16303" tag="hblock_tag_2" canDelete="false" classfield_id="16303" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16303" tag="hblock_tag_3" canDelete="false" classfield_id="16303" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="16301" parent_class="16301" fileExt=".cpp" fileName="qmap" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qmap.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QMap.cpp - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="25025" parent_class="25025" fileExt=".cpp" fileName="customertype" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;customertype.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="25030" tag="operation_25030" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25033" tag="operation_25033" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="25035" tag="operation_25035" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25037" tag="operation_25037" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="25026" parent_class="25026" fileExt=".cpp" fileName="enum" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;enum.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="25038" parent_class="25038" fileExt=".cpp" fileName="customer" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;customer.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation parent_id="25043" tag="operation_25043" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25045" tag="operation_25045" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation parent_id="25049" tag="operation_25049" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25051" tag="operation_25051" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25052" tag="operation_25052" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25053" tag="operation_25053" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25055" tag="operation_25055" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25056" tag="operation_25056" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25057" tag="operation_25057" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25058" tag="operation_25058" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25060" tag="operation_25060" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25062" tag="operation_25062" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25065" tag="operation_25065" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25068" tag="operation_25068" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation parent_id="25070" tag="operation_25070" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod accessType="0" parent_id="25072" tag="hblock_tag_0" canDelete="false" classfield_id="25072" >
         <header>
          <cppcodedocumentation tag="" text="Get the value of mId&amp;#010;//    QMap&lt;QString, Address*> mAddress;&amp;#010;@return the value of mId" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="25072" tag="hblock_tag_1" canDelete="false" classfield_id="25072" >
         <header>
          <cppcodedocumentation tag="" text="Set the value of mId&amp;#010;//    QMap&lt;QString, Address*> mAddress;&amp;#010;@param value the value of mId" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="25073" tag="hblock_tag_2" canDelete="false" classfield_id="25073" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="25073" tag="hblock_tag_3" canDelete="false" classfield_id="25073" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="0" parent_id="25074" tag="hblock_tag_4" canDelete="false" classfield_id="25074" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod accessType="1" parent_id="25074" tag="hblock_tag_5" canDelete="false" classfield_id="25074" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="25072" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" text="//    QMap&lt;QString, Address*> mAddress;" />
       </header>
       <ccfdeclarationcodeblock parent_id="25072" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="25072" tag="hblock_tag_0" canDelete="false" classfield_id="25072" >
        <header>
         <cppcodedocumentation tag="" text="Get the value of mId&amp;#010;//    QMap&lt;QString, Address*> mAddress;&amp;#010;@return the value of mId" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="25072" tag="hblock_tag_1" canDelete="false" classfield_id="25072" >
        <header>
         <cppcodedocumentation tag="" text="Set the value of mId&amp;#010;//    QMap&lt;QString, Address*> mAddress;&amp;#010;@param value the value of mId" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="25073" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="25073" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="25073" tag="hblock_tag_2" canDelete="false" classfield_id="25073" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="25073" tag="hblock_tag_3" canDelete="false" classfield_id="25073" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="25074" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="25074" tag="" canDelete="false" indentLevel="1" text="FIX ME;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="25074" tag="hblock_tag_4" canDelete="false" classfield_id="25074" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="25074" tag="hblock_tag_5" canDelete="false" classfield_id="25074" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="25042" parent_class="25042" fileExt=".cpp" fileName="customerfactory" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;customerfactory.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="25054" parent_class="25054" fileExt=".cpp" fileName="qdate" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qdate.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16016" parent_class="16016" fileExt=".h" fileName="dataobject" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DATAOBJECT_H&amp;#010;#define DATAOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;qstringlist.h&quot;&amp;#010;#include &quot;qmetaproperty.h&quot;&amp;#010;#include &quot;uint.h&quot;&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DATAOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16017" parent_class="16017" fileExt=".h" fileName="qobject" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QOBJECT_H&amp;#010;#define QOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16023" parent_class="16023" fileExt=".h" fileName="qstring" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QSTRING_H&amp;#010;#define QSTRING_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QSTRING_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QString.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16042" parent_class="16042" fileExt=".h" fileName="qstringlist" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QSTRINGLIST_H&amp;#010;#define QSTRINGLIST_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QSTRINGLIST_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QStringList.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16046" parent_class="16046" fileExt=".h" fileName="qmetaproperty" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QMETAPROPERTY_H&amp;#010;#define QMETAPROPERTY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QMETAPROPERTY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QMetaProperty.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16050" parent_class="16050" fileExt=".h" fileName="uint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef UINT_H&amp;#010;#define UINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //UINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			uint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16055" parent_class="16055" fileExt=".h" fileName="qvariant" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QVARIANT_H&amp;#010;#define QVARIANT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QVARIANT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QVariant.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16070" parent_class="16070" fileExt=".h" fileName="constraintmgr" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CONSTRAINTMGR_H&amp;#010;#define CONSTRAINTMGR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CONSTRAINTMGR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16071" parent_class="16071" fileExt=".h" fileName="constraineddataobject" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CONSTRAINEDDATAOBJECT_H&amp;#010;#define CONSTRAINEDDATAOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;dataobject.h&quot;&amp;#010;#include &quot;constraintmgr.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CONSTRAINEDDATAOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16085" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16085" tag="tblock_0" canDelete="false" indentLevel="1" text="static  ConstraintMgr smConstrMgr;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16085" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16085" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16085" tag="hblock_tag_1" canDelete="false" indentLevel="1" classfield_id="16085" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16086" parent_class="16086" fileExt=".h" fileName="country" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef COUNTRY_H&amp;#010;#define COUNTRY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;countrytype.h&quot;&amp;#010;#include &quot;qstringlist.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //COUNTRY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			country.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16108" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" text="//    static QStringList smCountryNames;" />
       </header>
       <ccfdeclarationcodeblock parent_id="16108" tag="tblock_0" canDelete="false" indentLevel="1" text=" CountryType mVal;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" text="//    static QStringList smCountryNames;" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16108" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16108" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" text="Get the value of mVal&amp;#010;//    static QStringList smCountryNames;&amp;#010;@return the value of mVal" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16108" tag="hblock_tag_1" canDelete="false" indentLevel="1" classfield_id="16108" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" text="Set the value of mVal&amp;#010;//    static QStringList smCountryNames;&amp;#010;@param value the value of mVal" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16109" parent_class="16109" fileExt=".h" fileName="objectfactory" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef OBJECTFACTORY_H&amp;#010;#define OBJECTFACTORY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;countrytype.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //OBJECTFACTORY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			objectfactory.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:43&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16110" parent_class="16110" fileExt=".h" fileName="address" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ADDRESS_H&amp;#010;#define ADDRESS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;constraineddataobject.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;countrytype.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ADDRESS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16129" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16129" tag="tblock_0" canDelete="false" indentLevel="1" text=" QString mLine1;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16129" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16129" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16129" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="16129" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16130" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16130" tag="tblock_1" canDelete="false" indentLevel="1" text=" QString mLine2;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16130" tag="hblock_tag_5" canDelete="false" indentLevel="1" classfield_id="16130" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16130" tag="hblock_tag_6" canDelete="false" indentLevel="1" classfield_id="16130" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16131" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16131" tag="tblock_2" canDelete="false" indentLevel="1" text=" QString mCity;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16131" tag="hblock_tag_7" canDelete="false" indentLevel="1" classfield_id="16131" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16131" tag="hblock_tag_8" canDelete="false" indentLevel="1" classfield_id="16131" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16132" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16132" tag="tblock_3" canDelete="false" indentLevel="1" text=" QString mPhone;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16132" tag="hblock_tag_9" canDelete="false" indentLevel="1" classfield_id="16132" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16132" tag="hblock_tag_10" canDelete="false" indentLevel="1" classfield_id="16132" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16133" parent_class="16133" fileExt=".h" fileName="usaddress" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef USADDRESS_H&amp;#010;#define USADDRESS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;address.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;countrytype.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //USADDRESS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16148" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16148" tag="tblock_0" canDelete="false" indentLevel="1" text=" QString mState;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16148" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16148" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16148" tag="hblock_tag_2" canDelete="false" indentLevel="1" classfield_id="16148" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16149" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16149" tag="tblock_1" canDelete="false" indentLevel="1" text=" QString mZip;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16149" tag="hblock_tag_3" canDelete="false" indentLevel="1" classfield_id="16149" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16149" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="16149" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16150" parent_class="16150" fileExt=".h" fileName="canadaaddress" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CANADAADDRESS_H&amp;#010;#define CANADAADDRESS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;address.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;countrytype.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CANADAADDRESS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="16165" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16165" tag="tblock_0" canDelete="false" indentLevel="1" text=" QString mProvince;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16165" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16165" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16165" tag="hblock_tag_2" canDelete="false" indentLevel="1" classfield_id="16165" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16166" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16166" tag="tblock_1" canDelete="false" indentLevel="1" text=" QString mPostalCode;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16166" tag="hblock_tag_3" canDelete="false" indentLevel="1" classfield_id="16166" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16166" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="16166" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16167" parent_class="16167" fileExt=".h" fileName="constraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CONSTRAINT_H&amp;#010;#define CONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			constraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16176" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16176" tag="tblock_0" canDelete="false" indentLevel="1" text=" bool mAlways;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16176" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16176" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16176" tag="hblock_tag_1" canDelete="false" indentLevel="1" classfield_id="16176" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16177" parent_class="16177" fileExt=".h" fileName="isodateformatconstraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ISODATEFORMATCONSTRAINT_H&amp;#010;#define ISODATEFORMATCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ISODATEFORMATCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			isodateformatconstraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:07&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16184" parent_class="16184" fileExt=".h" fileName="regexconstraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef REGEXCONSTRAINT_H&amp;#010;#define REGEXCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;qregexp.h&quot;&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //REGEXCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			regexconstraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16197" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16197" tag="tblock_0" canDelete="false" indentLevel="1" text=" QRegExp mRegExp;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16197" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16197" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16197" tag="hblock_tag_1" canDelete="false" indentLevel="1" classfield_id="16197" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16191" parent_class="16191" fileExt=".h" fileName="qregexp" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QREGEXP_H&amp;#010;#define QREGEXP_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QREGEXP_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QRegExp.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16198" parent_class="16198" fileExt=".h" fileName="enumconstraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ENUMCONSTRAINT_H&amp;#010;#define ENUMCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;#include &quot;qstringlist.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ENUMCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			enumconstraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16206" parent_class="16206" fileExt=".h" fileName="andconstraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ANDCONSTRAINT_H&amp;#010;#define ANDCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ANDCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			andconstraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16217" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16217" tag="tblock_0" canDelete="false" indentLevel="1" text=" Constraint* mc1;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16217" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16217" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16217" tag="hblock_tag_2" canDelete="false" indentLevel="1" classfield_id="16217" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16218" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16218" tag="tblock_1" canDelete="false" indentLevel="1" text=" Constraint* mc2;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16218" tag="hblock_tag_3" canDelete="false" indentLevel="1" classfield_id="16218" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16218" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="16218" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16219" parent_class="16219" fileExt=".h" fileName="doublerangeconstraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DOUBLERANGECONSTRAINT_H&amp;#010;#define DOUBLERANGECONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DOUBLERANGECONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			doublerangeconstraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16229" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16229" tag="tblock_0" canDelete="false" indentLevel="1" text=" double mLow;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16229" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16229" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16229" tag="hblock_tag_2" canDelete="false" indentLevel="1" classfield_id="16229" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16230" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16230" tag="tblock_1" canDelete="false" indentLevel="1" text=" double mHigh;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16230" tag="hblock_tag_3" canDelete="false" indentLevel="1" classfield_id="16230" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16230" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="16230" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16231" parent_class="16231" fileExt=".h" fileName="alwaysconstraint" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ALWAYSCONSTRAINT_H&amp;#010;#define ALWAYSCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ALWAYSCONSTRAINT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			alwaysconstraint.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16238" parent_class="16238" fileExt=".h" fileName="qhash" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QHASH_H&amp;#010;#define QHASH_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QHASH_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QHash.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16281" parent_class="16281" fileExt=".h" fileName="propsmap" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef PROPSMAP_H&amp;#010;#define PROPSMAP_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;qvariant.h&quot;&amp;#010;#include &quot;qstringlist.h&quot;&amp;#010;#include &quot;qmap.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //PROPSMAP_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			propsmap.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield parent_id="16302" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16302" tag="tblock_0" canDelete="false" indentLevel="1" text=" QMap mValueMap;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16302" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="16302" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16302" tag="hblock_tag_2" canDelete="false" indentLevel="1" classfield_id="16302" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="16303" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="16303" tag="tblock_1" canDelete="false" indentLevel="1" text=" QString mClassName;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="16303" tag="hblock_tag_3" canDelete="false" indentLevel="1" classfield_id="16303" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="16303" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="16303" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader16301" parent_class="16301" fileExt=".h" fileName="qmap" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QMAP_H&amp;#010;#define QMAP_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QMAP_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;  			QMap.h - Copyright ezust&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/usr/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Fri Aug 5 2005 at 23:19:08&amp;#010;The original location of this file is &amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader25025" parent_class="25025" fileExt=".h" fileName="customertype" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CUSTOMERTYPE_H&amp;#010;#define CUSTOMERTYPE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;qstringlist.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CUSTOMERTYPE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader25026" parent_class="25026" fileExt=".h" fileName="enum" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ENUM_H&amp;#010;#define ENUM_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ENUM_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader25038" parent_class="25038" fileExt=".h" fileName="customer" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CUSTOMER_H&amp;#010;#define CUSTOMER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;customertype.h&quot;&amp;#010;#include &quot;qdate.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CUSTOMER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields>
      <codeclassfield parent_id="25072" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" text="//    QMap&lt;QString, Address*> mAddress;" />
       </header>
       <ccfdeclarationcodeblock parent_id="25072" tag="tblock_0" canDelete="false" indentLevel="1" text=" QString mId;" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" text="//    QMap&lt;QString, Address*> mAddress;" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="25072" tag="hblock_tag_0" canDelete="false" indentLevel="1" classfield_id="25072" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" text="Get the value of mId&amp;#010;//    QMap&lt;QString, Address*> mAddress;&amp;#010;@return the value of mId" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="25072" tag="hblock_tag_3" canDelete="false" indentLevel="1" classfield_id="25072" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" text="Set the value of mId&amp;#010;//    QMap&lt;QString, Address*> mAddress;&amp;#010;@param value the value of mId" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="25073" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="25073" tag="tblock_1" canDelete="false" indentLevel="1" text=" QDate mDateEstablished;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="25073" tag="hblock_tag_4" canDelete="false" indentLevel="1" classfield_id="25073" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="25073" tag="hblock_tag_5" canDelete="false" indentLevel="1" classfield_id="25073" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield parent_id="25074" field_type="0" initialValue="" role_id="-1" writeOutMethods="true" listClassName="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock parent_id="25074" tag="tblock_2" canDelete="false" indentLevel="1" text=" CustomerType mType;" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod accessType="0" parent_id="25074" tag="hblock_tag_6" canDelete="false" indentLevel="1" classfield_id="25074" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod accessType="1" parent_id="25074" tag="hblock_tag_7" canDelete="false" indentLevel="1" classfield_id="25074" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader25042" parent_class="25042" fileExt=".h" fileName="customerfactory" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CUSTOMERFACTORY_H&amp;#010;#define CUSTOMERFACTORY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CUSTOMERFACTORY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument writeOutCode="true" package="" id="cppheader25054" parent_class="25054" fileExt=".h" fileName="qdate" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QDATE_H&amp;#010;#define QDATE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QDATE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" />
     </header>
     <classfields/>
    </classifiercodedocument>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
